comp_op ::= '==' | '<>' | '<=' | '>=' | '<' | '>'
add_op ::= '-' | '+' | '|' | '^'
mul_op ::= '*' | '/' | '%' | '>>' | '<<' | '&'
unary_op ::= '-' | '!'
identity ::= [A-Za-z_][A-Za-z0-9_]*
decimal ::= [0-9]+ '.' [0-9]+
integer ::= [0-9]+
string ::= "'" ([^'] | "\'" )* "'"
block_comment ::= '##' .+? '##'
line_comment ::= '#' [^\r\n] eol
eol ::= '\r\n' | '\n' | '\r'

function ::= 'fn' identity '(' identity* ')' statement* 'end'
statement ::= statement_assign | statement_next | statement_last | statement_return | statement_if | statement_while | statement_call
statement_in_while ::= statement_assign | statement_last | statement_return | statement_if | statement_while | statement_call
statement_if ::= 'if' expression_assign statement* ('elseif' statement*)* ('else' statement*)? 'end'
statement_while ::= 'while' expression_assign statement_in_while* 'next'
statement_call ::= expression_call
statement_return ::= 'return' expression_assign*
statement_next ::= 'next'
statement_last ::= 'last'
statement_assign ::= (identity array_index*)+ '=' expression_assign+
expression_assign ::= (identity array_index*)+ '=' expression_assign+ | expression_boolean_or
expression_boolean_or ::= expression_boolean_and ('or' expression_boolean_and )*
expression_boolean_and ::= expression_compare ('and' expression_compare )*
expression_compare ::= expression_add (comp_op expression_add)*
expression_add ::= expression_mul (add_op expression_mul)*
expression_mul ::= expression_unary (mul_op expression_unary)*
expression_unary ::= unary_op? expression_value
expression_value ::= expression_call | identity | decimal | integer | string | array_init | '(' expression_assign ')'
expression_call ::= identity '(' expression_assign* ')'
array_init ::= '[' ((expression_assign ':')? expression_assign)* ']'
array_index ::= '[' expression_assign ']'